AWSTemplateFormatVersion: 2010-09-09

Description: >
  Constructs a managed IAM policy to deploy a serverless project.

  This template assumes the stack is being deployed in the current region and account.
  You can then attach this policy to other IAM objects, such as users or roles.

  Based on the work done in: https://github.com/serverless/serverless/issues/1439

Parameters:

  UserName:
    Description: >-
      The name of the IAM User to construct.
    Type: String
    # From https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateUser.html
    AllowedPattern: '[A-Za-z0-9+=,.@-]+'  #'

  Service:
    Description: >-
      A name for this serverless service.
    Type: String

  Stage:
    Description: >-
      The stage for this project.
    Type: String

  MayInvoke:
    Description: >-
      Allow the constructed user to invoke lambdas.
    Type: String
    AllowedValues: [allow, deny]
    Default: deny

  MayDeployFunction:
    Description: >-
      Allow the user to deploy a single function. This is ignored if you don't create a CfnRole.
    Type: String
    AllowedValues: [allow, deny]
    Default: allow

  CreateCfnRole:
    Description: >-
      Create a role to assign to the `provider.cfnRole` variable, rather than rely on the user's permissions.
    Type: String
    AllowedValues: [create, skip]
    Default: create

Conditions:
  AllowInvoke: !Equals [!Ref MayInvoke, allow]
  UserFullPermissions: !Or [!Equals [!Ref MayDeployFunction, allow], !Equals [!Ref CreateCfnRole, skip]]
  CreateCfnRole: !Equals [!Ref CreateCfnRole, create]

Resources:

  DeployBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Service}-${Stage}-serverlessdeploybucket'

  DeployUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref UserName
      Policies: []  # Prefer managing policies separately.

  CfnRole:
    Condition: CreateCfnRole
    Type: AWS::IAM::Role
    Properties:
      Policies: []
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'cloudformation.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole

  DeployPolicy:
    # Cumulative inline policy size cannot exceed 2,048 characters for IAM Users.
    # Cloudformation will hang waiting for an update exceeding this amount to complete.
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !Ref DeployUser
      ManagedPolicyName: !Sub '${Service}-${Stage}-DeployPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ListDeploymentBucket
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListBucket
            Resource:
              # See https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html
              # Also https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/using-govcloud-arns.html
              - !Sub 'arn:${AWS::Partition}:s3:::${Service}-${Stage}-serverlessdeploybucket*'
          - Sid: ReadWriteAccessToDeploymentObjects
            Effect: Allow
            Action:
              - s3:GetObject*
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${Service}-${Stage}-serverlessdeploybucket*/*'
          - Sid: ValidateTemplate
            Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: '*'
          - Sid: ReadAccessToCloudFormation
            Effect: Allow
            Action:
              - cloudformation:Describe*
              - cloudformation:List*
              - cloudformation:Get*
              - cloudformation:PreviewStackUpdate
            Resource:
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Service}-${Stage}/*'
          - Sid: WriteAccessToCloudFormation
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:UpdateStack
              - cloudformation:DeleteStack
              - cloudformation:DeleteChangeSet
              - cloudformation:CreateChangeSet
              - cloudformation:ExecuteChangeSet
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Service}-${Stage}/*'
          - Sid: GetLambdaRole
            Effect: Allow
            Action:
              - iam:GetRole
            Resource:
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Service}-${Stage}-${AWS::Region}-lambdaRole'

  DeployViaRole:
    Condition: CreateCfnRole
    Type: AWS::IAM::Policy
    Properties:
      Users:
        - !Ref DeployUser
      PolicyName: !Sub '${Service}-${Stage}-DeployViaRole'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PassRoleToCloudFormation
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !GetAtt CfnRole.Arn

  CreateServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-CreateServicePolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Lambdas
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:TagResource
            Resource:
              - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Service}-${Stage}*'

  CreateCognitoPoolPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-PoolPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CognitoPool
            Effect: Allow
            Action:
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
              - cognito-idp:UpdateUserPool
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
              - cognito-idp:UpdateUserPoolDomain
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:DeleteUserPoolClient
              - cognito-idp:UpdateUserPoolClient
              - cognito-idp:ListTagsForResource
              - cognito-idp:CreateIdentityProvider
              - cognito-idp:CreateResourceServer
              - cognito-idp:UpdateResourceServer
              - cognito-idp:DeleteResourceServer
              - cloudfront:updateDistribution
              - iam:CreateServiceLinkedRole
            Resource: '*'

  CreateCognitoIdentityPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-IdentityPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CognitoIdentity
            Effect: Allow
            Action:
              - cognito-identity:CreateIdentityPool
              - cognito-identity:DeleteIdentityPool
              - cognito-identity:UpdateIdentityPool
              - cognito-identity:SetIdentityPoolRoles
            Resource: '*'

  CreateS3BucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-s3bucketpolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CreateAnalyticsBucket
            Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${Service}-${Stage}-appanalytics'

  CreateFirehostPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-firehosepolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CreateFirehoseStream
            Effect: Allow
            Action:
              - firehose:CreateDeliveryStream
              - firehose:DeleteDeliveryStream
              - firehose:DescribeDeliveryStream
              - firehose:TagDeliveryStream
              - firehose:UntagDeliveryStream
              - firehose:UpdateDestination
            Resource:
              - !Sub 'arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${Service}-${Stage}-*'

  CreateGluePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-gluepolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CreateGlueSchema
            Effect: Allow
            Action:
              - glue:CreateDatabase
              - glue:UpdateDatabase
              - glue:CreatePartition
              - glue:UpdatedPartition
              - glue:CreateTable
              - glue:UpdateTable
              - glue:DeleteDatabase
              - glue:DeletePartition
              - glue:UpdatePartition
              - glue:DeleteTable
            Resource:
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:*'

  UpdateServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      ManagedPolicyName: !Sub '${Service}-${Stage}-UpdateServicePolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DropDeploymentBucket
            Effect: Allow
            Action:
              - s3:DeleteBucket
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${Service}-${Stage}-serverlessdeploybucket*'
          - Sid: ReadAccessToDeploymentObjects
            Effect: Allow
            Action:
              - s3:GetObject*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${Service}-${Stage}-serverlessdeploybucket*/*'
          - Sid: Lambdas
            Effect: Allow
            Action:
              - lambda:Get*
              - lambda:List*
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
              - lambda:PublishVersion
              - lambda:CreateAlias
              - lambda:DeleteAlias
              - lambda:UpdateAlias
              - lambda:AddPermission
              - lambda:RemovePermission
              - lambda:TagResource
            Resource:
              - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Service}-${Stage}*'
          - Sid: DynamoDb
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:CreateTable
              - dynamodb:DeleteTable
              - dynamodb:UpdateTable
              - dynamodb:DescribeContinuousBackups
              - dynamodb:UpdateContinuousBackups
            Resource:
              - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'
          - Sid: CloudwatchEvents
            Effect: Allow
            Action:
              - events:Put*
              - events:Remove*
              - events:Delete*
              - events:Describe*
            Resource:
              - !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${Service}-${Stage}*'
          - Sid: CustomDomain
            Effect: Allow
            Action:
              - acm:ListCertificates
              - cloudfront:UpdateDistribution
            Resource: 
              - '*'
          - Sid: CloudwatchLogs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DeleteLogGroup
              - logs:DeleteLogStream
              - logs:DescribeLogStreams
              - logs:FilterLogEvents
              - logs:PutRetentionPolicy
              - logs:DeleteRetentionPolicy
            Resource:
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Service}-${Stage}*:log-stream:*'
          - Sid: CloudwatchAlarms
            Effect: Allow
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DeleteAlarm
              - cloudwatch:DeleteAlarms
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${Service}-${Stage}*'
          - Sid: CloudwatchLogGroups
            Effect: Allow
            Action:
              - logs:DescribeLogGroups
            Resource:
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream:*'
          - Sid: SNS
            Effect: Allow
            Action:
              - SNS:ListTopics
              - SNS:CreateTopic
              - SNS:UpdateTopic
              - SNS:DeleteTopic
              - SNS:GetTopicAttributes
              - SNS:Subscribe
              - SNS:Unsubscribe
              - SNS:ListSubscriptions
              - SNS:ListSubscriptionsByTopic
              - SNS:GetSubscriptionAttributes
            Resource:
              - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*'
          - Sid: IamRole
            Effect: Allow
            Action:
              - iam:GetRole
              - iam:PassRole
              - iam:CreateRole
              - iam:DeleteRole
              - iam:DetachRolePolicy
              - iam:PutRolePolicy
              - iam:AttachRolePolicy
              - iam:DeleteRolePolicy
            Resource:
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Service}-${Stage}-${AWS::Region}-lambdaRole'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Service}-${Stage}-${AWS::Region}-lambdaRole'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Service}-${Stage}-KinesisRole-*'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Service}-${Stage}-GatewayRole-*'

  ApiGwPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Users:
        - !If [UserFullPermissions, !Ref DeployUser, !Ref 'AWS::NoValue']
      Roles:
        - !If [CreateCfnRole, !Ref CfnRole, !Ref 'AWS::NoValue']
      PolicyName: !Sub '${Service}-${Stage}-ApiGwPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ApiGwEvents
            Effect: Allow
            Action:
              - apigateway:GET
              - apigateway:POST
              - apigateway:PUT
              - apigateway:DELETE
              - apigateway:PATCH
              - apigateway:TagResource
            Resource:
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/*'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/apikeys'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/apikeys/*'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::*'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/usageplans'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/usageplans/*'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/domainnames/*'
              - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/domainnames'

  InvokeLambdaPolicy:
    Condition: AllowInvoke
    Type: AWS::IAM::Policy
    Properties:
      Users:
        - !Ref DeployUser
      PolicyName: !Sub '${Service}-${Stage}-InvokeLambdaPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: InvokeFunction
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Service}-${Stage}*'

Outputs:
  cfnRole:
    Description: 'The `provider.cfnRole` value to use, or empty string if no role was created.'
    Value: !If [CreateCfnRole, !GetAtt CfnRole.Arn, '']