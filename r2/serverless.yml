# For full config options, check the docs:
#    docs.serverless.com

service: folktellsr2
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <4.0.0'

custom:
  stage: ${opt:stage, self:provider.stage}
  alerts:
    stages:
      - prod
      - dev
    topics:
      alarm:
        topic: ${self:service}-${opt:stage, self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: support@folktells.com 
    alarms:
      - functionErrors
      - functionThrottles
  customDomain:
    domainName: ${self:custom.myEnvironment.apiDomain.${self:custom.stage}}
    basePath: r2
    stage: ${self:provider.stage}
    createRoute53Record: true
  pythonRequirements:
     dockerizePip: true
  # Configures throttling settings for all http endpoints
  apiGatewayThrottling:
    maxRequestsPerSecond: 1000
    maxConcurrentRequests: 2000
  storyTable: ${self:custom.stage}-story
  myEnvironment: 
    stageRole:
      prod: arn:aws:iam::743418793984:role/folktellsR2ProdDeploy-CfnRole-H6ELLFA5TQSG
      dev: arn:aws:iam::788541814854:role/folktellsr2DevDeploy-CfnRole-IMV3BY8EUXJ6
    # these ARNs are for Lambda permissions and Lambdas can use ca-central-1
    sesArn:
      prod: "arn:aws:ses:ca-central-1:743418793984:identity/*"
      dev: "arn:aws:ses:ca-central-1:788541814854:identity/*"
    kinesisVideoArn:
      prod: "arn:aws:kinesisvideo:ca-central-1:743418793984:*"
      dev: "arn:aws:kinesisvideo:ca-central-1:788541814854:*"
    storyTableArn:
      prod: "arn:aws:dynamodb:ca-central-1:743418793984:table/prod-story"
      dev: "arn:aws:dynamodb:ca-central-1:788541814854:table/dev-story"
    apiDomain:
      prod: "api.folktells.com"
      dev: "devapi.folktells.com"
    snsAppArn:
      prod: "arn:aws:sns:us-east-1:743418793984:app/GCM/FolktellsFCM"
      dev: "arn:aws:sns:us-east-1:788541814854:app/GCM/FolktellsFCM"
    verifyReceipt:
      prod: "https://buy.itunes.apple.com/verifyReceipt"
      dev: "https://sandbox.itunes.apple.com/verifyReceipt"
    gatewayResources:
      prod: "arn:aws:execute-api:ca-central-1:743418793984:*"
      dev: "arn:aws:execute-api:ca-central-1:788541814854:*"      

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: ca-central-1
  logRetentionInDays: 14
  environment:
    stageRole: ${self:custom.myEnvironment.stageRole.${self:custom.stage}}
    sesArn: ${self:custom.myEnvironment.sesArn.${self:custom.stage}}
    kinesisVideoArn: ${self:custom.myEnvironment.kinesisVideoArn.${self:custom.stage}}
    storyTableArn: ${self:custom.myEnvironment.storyTableArn.${self:custom.stage}}
    snsAppArn: ${self:custom.myEnvironment.snsAppArn.${self:custom.stage}}
    verifyReceipt: ${self:custom.myEnvironment.verifyReceipt.${self:custom.stage}}
    gatewayResources: ${self:custom.myEnvironment.gatewayResources.${self:custom.stage}}
  apiGateway:
    apiKeys: 
      - name: ${self:provider.stage}-jwtapikey
        value: ${env:FT_R2_KEY}

  iam:
    deploymentRole: ${self:provider.environment.stageRole}
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - ${self:provider.environment.storyTableArn}
            - Fn::Join:
              - '/'
              - - ${self:provider.environment.storyTableArn}
                - "index/*"
        - Effect: "Allow"
          Action:
            - ses:SendEmail
          Resource:
            - ${self:provider.environment.sesArn}
        - Effect: "Allow"
          Action:
            - sns:CreatePlatformEndpoint
            - sns:DeleteEndpoint
            - sns:DeleteEndpoint
            - sns:GetEndpointAttributes
            - sns:SetEndpointAttributes
            - SNS:Publish
          Resource:
            - ${self:provider.environment.snsAppArn}
        - Effect: Allow
          Action:
            - firehose:PutRecord
            - firehose:PutRecordBatch
          Resource: "*"
        - Effect: Allow
          Action:
            - kinesisvideo:CreateSignalingChannel
            - kinesisvideo:ListSignalingChannels
            - kinesisvideo:DescribeSignalingChannel
            - kinesisvideo:GetSignalingChannelEndpoint
            - kinesisvideo:GetIceServerConfig
          Resource: "*"
            # - ${self:provider.environment.kinesisVideoArn}
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
            - ssm:PutParameter
          Resource:
            - Fn::Join:
              - ''
              -
                - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/appstore/*'
            - Fn::Join:
              - ''
              -
                - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/twilio/*'
            - Fn::Join:
              - ''
              -
                - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/plivo/*'
            - Fn::Join:
              - ''
              -
                - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/jwe/*'
            - Fn::Join:
              - ''
              -
                - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/webrtc/*'
            - Fn::Join:
              - ''
              -
                - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':parameter/fcm/*'
  deploymentBucket:
    name: folktellsr2-${self:provider.stage}-serverlessdeploybucket
# you can overwrite defaults here


plugins:
  - serverless-api-gateway-throttling
  - serverless-iam-roles-per-function
  - serverless-apigateway-service-proxy
  - serverless-domain-manager
package:
  individually: true 
  exclude:
    - ./**

functions:
  passwordlessAuthorizer: 
    handler: bin/passwordlessAuthorizer
    package:
      include:
        - ./bin/passwordlessAuthorizer
    events:
      - http:
          path: auth/token
          method: get
          private: true
    environment:
      storyTable: ${self:custom.storyTable}
  jwtAuthorizer:
    handler: bin/jwtAuthorizer
    package:
      include:
        - ./bin/jwtAuthorizer
    environment:
      storyTable: ${self:custom.storyTable}
      gatewayResources: ${self:provider.environment.gatewayResources}
      LOG_LEVEL: "debug"
  user:
    handler: bin/user
    package:
      include:
        - ./bin/user
    events:
      - http:
          path: user
          method: get
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  userPost:
    handler: bin/user_post
    package:
      include:
        - ./bin/user_post
    events:
      - http:
          path: user
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
      LOG_LEVEL: "debug"
  userByEmail:
    handler: bin/user_by_email
    package:
      include:
        - ./bin/user_by_email
    events:
      - http:
          path: user/{email}
          method: get
          request:
            parameters:
              paths:
                email: true
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  verifyReceipt: 
    handler: bin/verify_receipt
    package:
      include:
        - ./bin/verify_receipt
    events:
      - http:
          path: verifyReceipt
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
      verifyReceipt: "${self:provider.environment.verifyReceipt}"
  newStory:
    handler: bin/new_story
    package:
      include:
        - ./bin/new_story
    events:
      - http:
          path: story
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  getStories:
    handler: bin/stories
    package:
      include:
        - ./bin/stories
    events:
      - http:
          path: stories
          method: get
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  getScheduledItems:
    handler: bin/si
    package:
      include:
        - ./bin/si
    events:
      - http:
          path: si/{orgId}/{year}/{month}
          method: get
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  smsGetNumber: 
    handler: bin/sms_getnumber
    package:
      include:
        - ./bin/sms_getnumber
    events:
      - http:
          path: sms/number
          method: get
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
  smsAssignNumber: 
    handler: bin/sms_assignnumber
    package:
      include:
        - ./bin/sms_assignnumber
    events:
      - http:
          path: sms/number
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  smsReceive: 
    handler: bin/sms_receive
    package:
      include:
        - ./bin/sms_receive
    events:
      - http:
          path: sms/receive
          method: post
    environment:
      storyTable: ${self:custom.storyTable}
      LOG_LEVEL: "debug"
  remoteCommand:
    handler: bin/remote_command
    package:
      include:
        - ./bin/remote_command
    events:
      - http:
          path: remote/command
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
      LOG_LEVEL: "debug"
  newGroup:
    handler: bin/new_group
    package:
      include:
        - ./bin/new_group
    events:
      - http:
          path: group
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  groupMember:
    handler: bin/group_member
    package:
      include:
        - ./bin/group_member
    events:
      - http:
          path: group/member
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  groupMembers:
    handler: bin/group_members
    package:
      include:
        - ./bin/group_members
    events:
      - http:
          path: group/members/{groupID}
          method: get
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
      - http:
          path: group/members/
          method: get
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  deleteGroup:
    handler: bin/delete_group
    package:
      include:
        - ./bin/delete_group
    events:
      - http:
          path: group/{groupID}
          method: delete
          request:
            parameters:
              paths:
                groupID: true
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
  deviceToken: 
    handler: bin/device_token
    package:
      include:
        - ./bin/device_token
    events:
      - http:
          path: app/deviceToken
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}
      snsAppArn: "${self:provider.environment.snsAppArn}"
  appUsage: 
    handler: bin/app_usage
    package:
      include:
        - ./bin/app_usage
    events:
      - http:
          path: app/usage
          method: post
          private: true
    environment:
      analyticsStream: "folktells-${self:custom.stage}-AppAnalyticsStream"

  signup: 
    handler: bin/signup
    package:
      include:
        - ./bin/signup
    events:
      - http:
          path: auth/signup
          method: post
          private: true
    environment:
      storyTable: ${self:custom.storyTable}
  signupVerify: 
    handler: bin/signup_verify
    package:
      include:
        - ./bin/signup_verify
    events:
      - http:
          path: auth/signup/{requestID}
          method: get
          private: true
          request:
            parameters:
              paths:
                requestID: true
    environment:
      storyTable: ${self:custom.storyTable}
  addDeviceVerify: 
    handler: bin/addDevice_verify
    package:
      include:
        - ./bin/addDevice_verify
    events:
      - http:
          path: auth/signup/addDevice
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}

  p2pLookup:
    handler: bin/p2p_lookup
    package:
      include:
        - ./bin/p2p_lookup
    events:
      - http:
          path: p2p/lookup/{email}
          method: get
          request:
            parameters:
              paths:
                email: true
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      storyTable: ${self:custom.storyTable}

  webRTCChannel:
    handler: bin/webrtc_channel
    package:
      include:
        - ./bin/webrtc_channel
    events:
      - http:
          path: webrtc/channel
          method: post
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
  webRTCService:
    handler: bin/webrtc_service
    package:
      include:
        - ./bin/webrtc_service
    events:
      - http:
          path: webrtc/service/{vm}/{channel}/{device}
          method: get
          request:
            parameters:
              paths:
                vm: true
                channel: true
                device: true
          authorizer:
            name: jwtAuthorizer
            type: token
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
    environment:
      LOG_LEVEL: "debug"
  websocketAuthorizer:
    handler: bin/websocketAuthorizer
    package:
      include:
        - ./bin/websocketAuthorizer
    environment:
      storyTable: ${self:custom.storyTable}
      gatewayResources: ${self:provider.environment.gatewayResources}
      LOG_LEVEL: "debug"
  connectionHandler:
    handler: bin/connection_handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: websocketAuthorizer
            identitySource: 'route.request.header.Authorization'
    package:
      include:
        - ./bin/connection_handler
    environment:
      storyTable: ${self:custom.storyTable}
      LOG_LEVEL: "debug"
  disconnectionHandler:
    handler: bin/disconnection_handler
    events:
      - websocket:
          route: $disconnect
    package:
      include:
        - ./bin/disconnection_handler
    environment:
      storyTable: ${self:custom.storyTable}
      LOG_LEVEL: "debug"
  # defaultHandler:
  #   handler: bin/socketMessageHandler
  #   events:
  #     - websocket: $default #simple event definition without extra route property

